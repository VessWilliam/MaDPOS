@using RetailPOS.Web.Models.ViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@model RetailPOS.Web.Models.ViewModel.CheckoutViewModel

@{
    ViewData["Title"] = "Checkout";
}

<!-- Hidden Anti-Forgery Token for AJAX -->
<input type="hidden" id="antiForgeryToken" name="__RequestVerificationToken" value="@Antiforgery.GetTokens(ViewContext.HttpContext).RequestToken" />

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="bi bi-cart me-2"></i>Checkout
                    </h4>
                    <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">
                        <i class="bi bi-house me-2"></i>Back to Home
                    </a>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Add Product</label>
                                <select id="productSelect" class="form-select">
                                    <option value="">-- Select Product --</option>
                                    @foreach (var product in Model.Products)
                                    {
                                        <option value="@product.Id"
                                                data-price="@product.Price"
                                                data-stock="@product.StockQuantity">
                                            @product.Name - @product.Price.ToString("C")
                                        </option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label">Quantity</label>
                                <input type="number" id="quantity" class="form-control" min="1" value="1" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label">&nbsp;</label>
                                <button type="button" id="addItem" class="btn btn-primary w-100">
                                    <i class="bi bi-plus-circle me-2"></i>Add Item
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive mb-4">
                        <table class="table" id="itemsTable">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.CartItems)
                                {
                                    <tr>
                                        <td>@item.ProductName</td>
                                        <td>@item.Price.ToString("C")</td>
                                        <td>@item.Quantity</td>
                                        <td>@((item.Price * item.Quantity).ToString("C"))</td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-danger remove-item" data-id="@item.ProductId">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Total:</strong></td>
                                    <td colspan="2"><strong id="totalAmount">@Model.CartItems.Sum(item => item.Price * item.Quantity).ToString("C")</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-success" id="completeSale">
                            <i class="bi bi-check-circle me-2"></i>Process payment
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        var cartItemsJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model.CartItems ?? new List<CartItemViewModel>());
    }
    <script>
        $(document).ready(function () {
            let items = @Html.Raw(cartItemsJson);

            // Function to save cart items to Redis via AJAX
            function saveCartToRedis() {
                $.ajax({
                    url: '@Url.Action("SaveCart", "Checkout")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(items),
                    headers: {
                        'RequestVerificationToken': $('#antiForgeryToken').val()
                    },
                    success: function () {
                        console.log('Cart saved to Redis');
                    },
                    error: function () {
                        alert('Failed to save cart.');
                    }
                });
            }

            $('#addItem').click(function () {
                const productSelect = $('#productSelect');
                const product = productSelect.find('option:selected');
                const quantity = parseInt($('#quantity').val());

                if (!product.val() || quantity < 1) {
                    alert('Please select a product and enter a valid quantity.');
                    return;
                }

                const productId = product.val();
                const productName = product.text().split(' - ')[0].trim();
                const price = parseFloat(product.data('price'));
                const stock = parseInt(product.data('stock'));

                if (quantity > stock) {
                    alert('Quantity exceeds available stock.');
                    return;
                }

                let existingItem = items.find(item => item.ProductName.trim() === productName);
                if (existingItem) {
                    existingItem.Quantity += quantity;
                } else {
                    const item = {
                        ProductId: productId,
                        ProductName: productName,
                        Price: price,
                        Quantity: quantity
                    };
                    items.push(item);
                }

                updateTable();
                resetForm();

                // Save cart to Redis after adding item
                saveCartToRedis();
            });

            function updateTable() {
                const tbody = $('#itemsTable tbody');
                tbody.empty();
                let total = 0;

                items.forEach((item, index) => {
                    const itemTotal = item.Price * item.Quantity;
                    total += itemTotal;

                    tbody.append(
                        '<tr>' +
                        '<td>' + item.ProductName + '</td>' +
                        '<td>$' + item.Price.toFixed(2) + '</td>' +
                        '<td>' + item.Quantity + '</td>' +
                        '<td>$' + itemTotal.toFixed(2) + '</td>' +
                        '<td>' +
                        '<button type="button" class="btn btn-sm btn-outline-danger remove-item" data-index="' + index + '">' +
                        '<i class="bi bi-trash"></i>' +
                        '</button>' +
                        '</td>' +
                        '</tr>'
                    );
                });

                $('#totalAmount').text('$' + total.toFixed(2));
            }

            function resetForm() {
                $('#productSelect').val('');
                $('#quantity').val(1);
            }

            $(document).on('click', '.remove-item', function () {
                const index = $(this).data('index');
                items.splice(index, 1);
                updateTable();

                // Save cart to Redis after removing item
                saveCartToRedis();
            });

            $('#completeSale').click(function () {
                if (items.length === 0) {
                    alert('Please add at least one item to the sale.');
                    return;
                }

                // Save the items in localStorage so Payment view can access them
                localStorage.setItem('checkoutItems', JSON.stringify(items));

                // Optional: store total
                const totalAmount = items.reduce((sum, item) => sum + (item.Price * item.Quantity), 0);
                localStorage.setItem('checkoutTotal', totalAmount.toFixed(2));

                // Redirect to the Payment view
                window.location.href = '@Url.Action("Payment", "Checkout")';
            });
        });
    </script>
}